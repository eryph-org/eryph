// <auto-generated />
using System;
using Eryph.StateDb.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eryph.StateDb.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerStateStoreContext))]
    partial class SqlServerStateStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eryph.StateDb.Model.CatletDrive", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("AttachedDiskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachedDiskId");

                    b.HasIndex("CatletId");

                    b.ToTable("CatletDrives");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletNetworkAdapter", b =>
                {
                    b.Property<Guid>("CatletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MacAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SwitchName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatletId", "Id");

                    b.ToTable("CatletNetworkAdapters");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NetworkPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubnetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NetworkPortId");

                    b.HasIndex("SubnetId");

                    b.ToTable("IpAssignment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IpAssignment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpPool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextIp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubnetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubnetId");

                    b.ToTable("IpPools");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.NetworkPort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("MacAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MacAddress")
                        .IsUnique()
                        .HasFilter("[MacAddress] IS NOT NULL");

                    b.ToTable("NetworkPorts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NetworkPort");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("TaskId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("c1813384-8ecb-4f17-b846-821ee515d19b"));

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationProjectModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("OperationProjectModel");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationResourceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationResources");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationTaskModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferenceType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProjectId");

                    b.ToTable("OperationTasks");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.ProjectRoleAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("ProjectId", "IdentityId", "RoleId");

                    b.ToTable("ProjectRoles");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.ReportedNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DnsServerAddresses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPv4DefaultGateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPv6DefaultGateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpV4Addresses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpV4Subnets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpV6Addresses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpV6Subnets")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatletId");

                    b.ToTable("ReportedNetworks");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Subnet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("IpNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subnet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Subnet");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Eryph.StateDb.Model.TaskProgressEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskProgress");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpPoolAssignment", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.IpAssignment");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("PoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PoolId", "Number")
                        .IsUnique()
                        .HasFilter("[PoolId] IS NOT NULL AND [Number] IS NOT NULL");

                    b.HasDiscriminator().HasValue("IpPoolAssignment");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.FloatingNetworkPort", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.NetworkPort");

                    b.Property<string>("PoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubnetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FloatingNetworkPort");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualNetworkPort", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.NetworkPort");

                    b.Property<Guid?>("FloatingPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FloatingPortId")
                        .IsUnique()
                        .HasFilter("[FloatingPortId] IS NOT NULL");

                    b.HasIndex("NetworkId");

                    b.HasDiscriminator().HasValue("VirtualNetworkPort");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Catlet", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.Resource");

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatletType")
                        .HasColumnType("int");

                    b.Property<int>("CpuCount")
                        .HasColumnType("int");

                    b.Property<string>("DataStore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Frozen")
                        .HasColumnType("bit");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MaximumMemory")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("MinimumMemory")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecureBootTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StartupMemory")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("StorageIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("UpTime")
                        .HasColumnType("time");

                    b.Property<Guid>("VMId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("HostId");

                    b.ToTable("Catlets");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletFarm", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.Resource");

                    b.Property<string>("HardwareId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CatletFarms");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualDisk", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.Resource");

                    b.Property<string>("DataStore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiskType")
                        .HasColumnType("int");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Frozen")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ParentId");

                    b.ToTable("VirtualDisks");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualNetwork", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.Resource");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpNetwork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkProvider")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("VirtualNetworks");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.ProviderSubnet", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.Subnet");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ProviderSubnet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualNetworkSubnet", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.Subnet");

                    b.Property<int>("DhcpLeaseTime")
                        .HasColumnType("int");

                    b.Property<string>("DnsServersV4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTU")
                        .HasColumnType("int");

                    b.Property<Guid>("NetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("NetworkId");

                    b.HasDiscriminator().HasValue("VirtualNetworkSubnet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletNetworkPort", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.VirtualNetworkPort");

                    b.Property<Guid>("CatletMetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CatletMetadataId");

                    b.HasDiscriminator().HasValue("CatletNetworkPort");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.NetworkRouterPort", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.VirtualNetworkPort");

                    b.Property<Guid>("RoutedNetworkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RoutedNetworkId")
                        .IsUnique()
                        .HasFilter("[RoutedNetworkId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("NetworkRouterPort");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.ProviderRouterPort", b =>
                {
                    b.HasBaseType("Eryph.StateDb.Model.VirtualNetworkPort");

                    b.Property<string>("PoolName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubnetName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("NetworkPorts", t =>
                        {
                            t.Property("PoolName")
                                .HasColumnName("ProviderRouterPort_PoolName");

                            t.Property("SubnetName")
                                .HasColumnName("ProviderRouterPort_SubnetName");
                        });

                    b.HasDiscriminator().HasValue("ProviderRouterPort");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletDrive", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.VirtualDisk", "AttachedDisk")
                        .WithMany("AttachedDrives")
                        .HasForeignKey("AttachedDiskId");

                    b.HasOne("Eryph.StateDb.Model.Catlet", "Catlet")
                        .WithMany("Drives")
                        .HasForeignKey("CatletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachedDisk");

                    b.Navigation("Catlet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletNetworkAdapter", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.Catlet", "Catlet")
                        .WithMany("NetworkAdapters")
                        .HasForeignKey("CatletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catlet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpAssignment", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.NetworkPort", "NetworkPort")
                        .WithMany("IpAssignments")
                        .HasForeignKey("NetworkPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eryph.StateDb.Model.Subnet", "Subnet")
                        .WithMany("IpAssignments")
                        .HasForeignKey("SubnetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NetworkPort");

                    b.Navigation("Subnet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpPool", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.Subnet", "Subnet")
                        .WithMany("IpPools")
                        .HasForeignKey("SubnetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subnet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationLogEntry", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.OperationModel", "Operation")
                        .WithMany("LogEntries")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eryph.StateDb.Model.OperationTaskModel", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationProjectModel", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.OperationModel", "Operation")
                        .WithMany("Projects")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eryph.StateDb.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationResourceModel", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.OperationModel", "Operation")
                        .WithMany("Resources")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationTaskModel", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.OperationModel", "Operation")
                        .WithMany("Tasks")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eryph.StateDb.Model.Project", null)
                        .WithMany("ReferencedTasks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Project", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.Tenant", "Tenant")
                        .WithMany("Projects")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.ProjectRoleAssignment", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.Project", "Project")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.ReportedNetwork", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.Catlet", "Catlet")
                        .WithMany("ReportedNetworks")
                        .HasForeignKey("CatletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catlet");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Resource", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.Project", "Project")
                        .WithMany("Resources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.TaskProgressEntry", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.OperationTaskModel", "Task")
                        .WithMany("Progress")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpPoolAssignment", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.IpPool", "Pool")
                        .WithMany("IpAssignments")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualNetworkPort", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.FloatingNetworkPort", "FloatingPort")
                        .WithOne("AssignedPort")
                        .HasForeignKey("Eryph.StateDb.Model.VirtualNetworkPort", "FloatingPortId");

                    b.HasOne("Eryph.StateDb.Model.VirtualNetwork", "Network")
                        .WithMany("NetworkPorts")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FloatingPort");

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Catlet", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.CatletFarm", "Host")
                        .WithMany("Catlets")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualDisk", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.VirtualDisk", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualNetworkSubnet", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.VirtualNetwork", "Network")
                        .WithMany("Subnets")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletNetworkPort", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.CatletMetadata", null)
                        .WithMany()
                        .HasForeignKey("CatletMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eryph.StateDb.Model.NetworkRouterPort", b =>
                {
                    b.HasOne("Eryph.StateDb.Model.VirtualNetwork", "RoutedNetwork")
                        .WithOne("RouterPort")
                        .HasForeignKey("Eryph.StateDb.Model.NetworkRouterPort", "RoutedNetworkId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("RoutedNetwork");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.IpPool", b =>
                {
                    b.Navigation("IpAssignments");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.NetworkPort", b =>
                {
                    b.Navigation("IpAssignments");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationModel", b =>
                {
                    b.Navigation("LogEntries");

                    b.Navigation("Projects");

                    b.Navigation("Resources");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.OperationTaskModel", b =>
                {
                    b.Navigation("Progress");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Project", b =>
                {
                    b.Navigation("ProjectRoles");

                    b.Navigation("ReferencedTasks");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Subnet", b =>
                {
                    b.Navigation("IpAssignments");

                    b.Navigation("IpPools");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Tenant", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.FloatingNetworkPort", b =>
                {
                    b.Navigation("AssignedPort")
                        .IsRequired();
                });

            modelBuilder.Entity("Eryph.StateDb.Model.Catlet", b =>
                {
                    b.Navigation("Drives");

                    b.Navigation("NetworkAdapters");

                    b.Navigation("ReportedNetworks");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.CatletFarm", b =>
                {
                    b.Navigation("Catlets");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualDisk", b =>
                {
                    b.Navigation("AttachedDrives");

                    b.Navigation("Childs");
                });

            modelBuilder.Entity("Eryph.StateDb.Model.VirtualNetwork", b =>
                {
                    b.Navigation("NetworkPorts");

                    b.Navigation("RouterPort");

                    b.Navigation("Subnets");
                });
#pragma warning restore 612, 618
        }
    }
}
