// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Haipa.StateDb.MySql.Migrations
{
    [DbContext(typeof(StateStoreContext))]
    internal class StateStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Haipa.StateDb.Model.Agent", b =>
            {
                b.Property<string>("Name")
                    .ValueGeneratedOnAdd();

                b.HasKey("Name");

                b.ToTable("Agents");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.AgentNetwork", b =>
            {
                b.Property<Guid>("NetworkId");

                b.Property<string>("AgentName");

                b.Property<string>("VirtualSwitchName");

                b.HasKey("NetworkId", "AgentName");

                b.HasIndex("AgentName");

                b.ToTable("AgentNetworks");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.Machine", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("AgentName");

                b.Property<string>("Name");

                b.Property<int>("Status");

                b.HasKey("Id");

                b.HasIndex("AgentName");

                b.ToTable("Machines");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.MachineNetwork", b =>
            {
                b.Property<Guid>("MachineId");

                b.Property<string>("AdapterName");

                b.Property<string>("DnsServersInternal")
                    .HasColumnName("DnsServers");

                b.Property<string>("IPv4DefaultGateway");

                b.Property<string>("IPv6DefaultGateway");

                b.Property<string>("IpV4AddressesInternal")
                    .HasColumnName("IpV4Addresses");

                b.Property<string>("IpV4SubnetsInternal")
                    .HasColumnName("IpV4Subnets");

                b.Property<string>("IpV6AddressesInternal")
                    .HasColumnName("IpV6Addresses");

                b.Property<string>("IpV6SubnetsInternal")
                    .HasColumnName("IpV6Subnets");

                b.HasKey("MachineId", "AdapterName");

                b.ToTable("MachineNetwork");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.Network", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Name")
                    .IsRequired();

                b.Property<ulong>("VLanId");

                b.HasKey("Id");

                b.ToTable("Networks");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.Operation", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<Guid>("MachineGuid");

                b.Property<int>("Status");

                b.Property<string>("StatusMessage");

                b.HasKey("Id");

                b.ToTable("Operations");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.OperationLogEntry", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Message");

                b.Property<Guid?>("OperationId");

                b.Property<Guid?>("TaskId");

                b.Property<DateTimeOffset>("Timestamp");

                b.HasKey("Id");

                b.HasIndex("OperationId");

                b.HasIndex("TaskId");

                b.ToTable("Logs");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.OperationTask", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("AgentName");

                b.Property<string>("Name");

                b.Property<Guid?>("OperationId");

                b.Property<int>("Status");

                b.HasKey("Id");

                b.HasIndex("OperationId");

                b.ToTable("OperationTasks");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.Subnet", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Address");

                b.Property<bool>("DhcpEnabled");

                b.Property<string>("DnsServersInternal")
                    .HasColumnName("DnsServers");

                b.Property<string>("GatewayAddress");

                b.Property<byte>("IpVersion");

                b.Property<bool>("IsPublic");

                b.Property<Guid>("NetworkId");

                b.HasKey("Id");

                b.HasIndex("Address");

                b.HasIndex("NetworkId");

                b.ToTable("Subnets");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.VirtualMachine", b =>
            {
                b.Property<Guid>("Id");

                b.Property<string>("Path");

                b.HasKey("Id");

                b.ToTable("VirtualMachines");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.VirtualMachineNetworkAdapter", b =>
            {
                b.Property<Guid>("MachineId");

                b.Property<string>("Name");

                b.Property<string>("MacAddress");

                b.Property<string>("SwitchName");

                b.HasKey("MachineId", "Name");

                b.ToTable("VirtualMachineNetworkAdapters");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.AgentNetwork", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Agent", "Agent")
                    .WithMany("Networks")
                    .HasForeignKey("AgentName")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Haipa.StateDb.Model.Network", "Network")
                    .WithMany("AgentNetworks")
                    .HasForeignKey("NetworkId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Haipa.StateDb.Model.Machine", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Agent", "Agent")
                    .WithMany("Machines")
                    .HasForeignKey("AgentName");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.MachineNetwork", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Machine", "Machine")
                    .WithMany("Networks")
                    .HasForeignKey("MachineId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Haipa.StateDb.Model.OperationLogEntry", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Operation", "Operation")
                    .WithMany("LogEntries")
                    .HasForeignKey("OperationId");

                b.HasOne("Haipa.StateDb.Model.OperationTask", "Task")
                    .WithMany()
                    .HasForeignKey("TaskId");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.OperationTask", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Operation", "Operation")
                    .WithMany("Tasks")
                    .HasForeignKey("OperationId");
            });

            modelBuilder.Entity("Haipa.StateDb.Model.Subnet", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Network", "Network")
                    .WithMany("Subnets")
                    .HasForeignKey("NetworkId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Haipa.StateDb.Model.VirtualMachine", b =>
            {
                b.HasOne("Haipa.StateDb.Model.Machine", "Machine")
                    .WithOne("VM")
                    .HasForeignKey("Haipa.StateDb.Model.VirtualMachine", "Id")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Haipa.StateDb.Model.VirtualMachineNetworkAdapter", b =>
            {
                b.HasOne("Haipa.StateDb.Model.VirtualMachine", "Vm")
                    .WithMany("NetworkAdapters")
                    .HasForeignKey("MachineId")
                    .OnDelete(DeleteBehavior.Cascade);
            });
#pragma warning restore 612, 618
        }
    }
}